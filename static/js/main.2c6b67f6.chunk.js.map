{"version":3,"sources":["store/store.ts","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionTypes","currentUserAction","currentUser","type","CurrentUser","getTodosSelector","state","todos","getSelectedUserIdSelector","selectedUserId","getCurrentUserSelector","initialState","store","createStore","action","AddTodos","SelectUserId","DeleteTodos","filter","todo","id","TodoList","useState","query","setQuery","selectedTodos","setSelectedTodos","useSelector","dispatch","useDispatch","selectUser","userId","deleteTodos","deleteTodosAction","filtredTodos","completed","getVisibleTodos","title","toLowerCase","includes","className","placeholder","value","onChange","event","target","map","readOnly","onClick","API_URL","getTodos","a","fetch","response","json","getUser","getCurrentUser","currentUserId","UserFromServer","useEffect","name","email","phone","App","getTodosFromServer","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c6b67f6.chunk.js","sourcesContent":["import { AnyAction, createStore, Reducer } from 'redux';\n\nexport enum ActionTypes {\n  AddTodos = 'AddTodos',\n  SelectUserId = 'SelectUserId',\n  CurrentUser = 'CurrentUser',\n  DeleteTodos = 'DeleteTodos',\n}\n\nexport const addTodosAction = (todos: Todo[]) => ({\n  type: ActionTypes.AddTodos,\n  todos,\n});\n\nexport const selectUserIdAction = (selectedUserId: number) => ({\n  type: ActionTypes.SelectUserId,\n  selectedUserId,\n});\n\nexport const currentUserAction = (currentUser: User) => ({\n  type: ActionTypes.CurrentUser,\n  currentUser,\n});\n\nexport const deleteTodosAction = (id: number) => ({\n  type: ActionTypes.DeleteTodos,\n  id,\n});\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getSelectedUserIdSelector = (state: State) => state.selectedUserId;\n\nexport const getCurrentUserSelector = (state: State) => state.currentUser;\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n  currentUser: User | null;\n}\n\nconst initialState: State = {\n  todos: [],\n  selectedUserId: 0,\n  currentUser: null,\n};\n\nconst reducer: Reducer<State, AnyAction> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case ActionTypes.AddTodos:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n\n    case ActionTypes.SelectUserId:\n      return {\n        ...state,\n        selectedUserId: action.selectedUserId,\n      };\n\n    case ActionTypes.CurrentUser:\n      return {\n        ...state,\n        currentUser: action.currentUser,\n      };\n\n    case ActionTypes.DeleteTodos:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  deleteTodosAction,\n  getTodosSelector,\n  selectUserIdAction,\n} from '../../store/store';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [selectedTodos, setSelectedTodos] = useState('');\n\n  const todos = useSelector(getTodosSelector);\n  const dispatch = useDispatch();\n\n  const selectUser = (userId: number) => dispatch(selectUserIdAction(userId));\n  const deleteTodos = (id: number) => dispatch(deleteTodosAction(id));\n\n  const getVisibleTodos = () => {\n    switch (selectedTodos) {\n      case 'Active':\n        return todos.filter(todo => !todo.completed);\n      case 'Completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  };\n\n  const visibleTodos = getVisibleTodos();\n\n  const filtredTodos = visibleTodos\n    .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__controlPanel controlPanel\">\n        <label>\n          <input\n            className=\"controlPanel__field\"\n            type=\"text\"\n            placeholder=\"Enter filter text\"\n            value={query}\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n        </label>\n\n        <select\n          className=\"controlPanel__field\"\n          value={selectedTodos}\n          onChange={(event) => setSelectedTodos(event.target.value)}\n        >\n          <option value=\"All\">All</option>\n          <option value=\"Active\">Active</option>\n          <option value=\"Completed\">Completed</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filtredTodos.map(todo => (\n            <li\n              className={`TodoList__item\n                ${todo.completed\n              ? 'TodoList__item--checked'\n              : 'TodoList__item--unchecked'\n            }`}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <div className=\"TodoList__buttons\">\n                {todo.userId && (\n                  <button\n                    className={`TodoList__user-button button\n                      ${todo.completed && 'TodoList__user-button--selected'}\n                    `}\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                )}\n                <button\n                  type=\"button\"\n                  className=\"TodoList__delete-button button\"\n                  onClick={() => deleteTodos(todo.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api';\nimport {\n  ActionTypes,\n  currentUserAction,\n  getCurrentUserSelector,\n  getSelectedUserIdSelector,\n} from '../../store/store';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const currentUser = useSelector(getCurrentUserSelector);\n  const selectedUserId = useSelector(getSelectedUserIdSelector);\n  const dispatch = useDispatch();\n\n  const getCurrentUser = async (currentUserId: number) => {\n    const UserFromServer = await getUser(currentUserId);\n\n    dispatch(currentUserAction(UserFromServer));\n  };\n\n  useEffect(() => {\n    getCurrentUser(selectedUserId);\n  }, [selectedUserId]);\n\n  const selectUser = (userId: number) => {\n    dispatch({ type: ActionTypes.SelectUserId, selectedUserId: userId });\n  };\n\n  return (\n    <div>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n          <p className=\"CurrentUser__email\">{currentUser.email}</p>\n          <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n        </div>\n      )}\n      <button\n        type=\"button\"\n        className=\"CurrentUser__button button\"\n        onClick={() => selectUser(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport {\n  ActionTypes,\n  getSelectedUserIdSelector,\n} from './store/store';\n\nconst App: React.FC = () => {\n  const selectedUserId = useSelector(getSelectedUserIdSelector);\n\n  const dispatch = useDispatch();\n\n  const getTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch({ type: ActionTypes.AddTodos, todos: todosFromServer });\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store/store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}